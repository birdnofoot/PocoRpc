// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: poco_rpc.proto

#ifndef PROTOBUF_poco_5frpc_2eproto__INCLUDED
#define PROTOBUF_poco_5frpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PocoRpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_poco_5frpc_2eproto();
void protobuf_AssignDesc_poco_5frpc_2eproto();
void protobuf_ShutdownFile_poco_5frpc_2eproto();

class RpcMessage;

// ===================================================================

class RpcMessage : public ::google::protobuf::Message {
 public:
  RpcMessage();
  virtual ~RpcMessage();

  RpcMessage(const RpcMessage& from);

  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMessage& default_instance();

  void Swap(RpcMessage* other);

  // implements Message ----------------------------------------------

  RpcMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMessage& from);
  void MergeFrom(const RpcMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required string client_uuid = 2;
  inline bool has_client_uuid() const;
  inline void clear_client_uuid();
  static const int kClientUuidFieldNumber = 2;
  inline const ::std::string& client_uuid() const;
  inline void set_client_uuid(const ::std::string& value);
  inline void set_client_uuid(const char* value);
  inline void set_client_uuid(const char* value, size_t size);
  inline ::std::string* mutable_client_uuid();
  inline ::std::string* release_client_uuid();
  inline void set_allocated_client_uuid(::std::string* client_uuid);

  // required string method_full_name = 3;
  inline bool has_method_full_name() const;
  inline void clear_method_full_name();
  static const int kMethodFullNameFieldNumber = 3;
  inline const ::std::string& method_full_name() const;
  inline void set_method_full_name(const ::std::string& value);
  inline void set_method_full_name(const char* value);
  inline void set_method_full_name(const char* value, size_t size);
  inline ::std::string* mutable_method_full_name();
  inline ::std::string* release_method_full_name();
  inline void set_allocated_method_full_name(::std::string* method_full_name);

  // required string message_body = 4;
  inline bool has_message_body() const;
  inline void clear_message_body();
  static const int kMessageBodyFieldNumber = 4;
  inline const ::std::string& message_body() const;
  inline void set_message_body(const ::std::string& value);
  inline void set_message_body(const char* value);
  inline void set_message_body(const char* value, size_t size);
  inline ::std::string* mutable_message_body();
  inline ::std::string* release_message_body();
  inline void set_allocated_message_body(::std::string* message_body);

  // @@protoc_insertion_point(class_scope:PocoRpc.RpcMessage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_client_uuid();
  inline void clear_has_client_uuid();
  inline void set_has_method_full_name();
  inline void clear_has_method_full_name();
  inline void set_has_message_body();
  inline void clear_has_message_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* client_uuid_;
  ::std::string* method_full_name_;
  ::std::string* message_body_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_poco_5frpc_2eproto();
  friend void protobuf_AssignDesc_poco_5frpc_2eproto();
  friend void protobuf_ShutdownFile_poco_5frpc_2eproto();

  void InitAsDefaultInstance();
  static RpcMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcMessage

// required uint64 id = 1;
inline bool RpcMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcMessage::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 RpcMessage::id() const {
  return id_;
}
inline void RpcMessage::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required string client_uuid = 2;
inline bool RpcMessage::has_client_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcMessage::set_has_client_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcMessage::clear_has_client_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcMessage::clear_client_uuid() {
  if (client_uuid_ != &::google::protobuf::internal::kEmptyString) {
    client_uuid_->clear();
  }
  clear_has_client_uuid();
}
inline const ::std::string& RpcMessage::client_uuid() const {
  return *client_uuid_;
}
inline void RpcMessage::set_client_uuid(const ::std::string& value) {
  set_has_client_uuid();
  if (client_uuid_ == &::google::protobuf::internal::kEmptyString) {
    client_uuid_ = new ::std::string;
  }
  client_uuid_->assign(value);
}
inline void RpcMessage::set_client_uuid(const char* value) {
  set_has_client_uuid();
  if (client_uuid_ == &::google::protobuf::internal::kEmptyString) {
    client_uuid_ = new ::std::string;
  }
  client_uuid_->assign(value);
}
inline void RpcMessage::set_client_uuid(const char* value, size_t size) {
  set_has_client_uuid();
  if (client_uuid_ == &::google::protobuf::internal::kEmptyString) {
    client_uuid_ = new ::std::string;
  }
  client_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcMessage::mutable_client_uuid() {
  set_has_client_uuid();
  if (client_uuid_ == &::google::protobuf::internal::kEmptyString) {
    client_uuid_ = new ::std::string;
  }
  return client_uuid_;
}
inline ::std::string* RpcMessage::release_client_uuid() {
  clear_has_client_uuid();
  if (client_uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_uuid_;
    client_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RpcMessage::set_allocated_client_uuid(::std::string* client_uuid) {
  if (client_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete client_uuid_;
  }
  if (client_uuid) {
    set_has_client_uuid();
    client_uuid_ = client_uuid;
  } else {
    clear_has_client_uuid();
    client_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string method_full_name = 3;
inline bool RpcMessage::has_method_full_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcMessage::set_has_method_full_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcMessage::clear_has_method_full_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcMessage::clear_method_full_name() {
  if (method_full_name_ != &::google::protobuf::internal::kEmptyString) {
    method_full_name_->clear();
  }
  clear_has_method_full_name();
}
inline const ::std::string& RpcMessage::method_full_name() const {
  return *method_full_name_;
}
inline void RpcMessage::set_method_full_name(const ::std::string& value) {
  set_has_method_full_name();
  if (method_full_name_ == &::google::protobuf::internal::kEmptyString) {
    method_full_name_ = new ::std::string;
  }
  method_full_name_->assign(value);
}
inline void RpcMessage::set_method_full_name(const char* value) {
  set_has_method_full_name();
  if (method_full_name_ == &::google::protobuf::internal::kEmptyString) {
    method_full_name_ = new ::std::string;
  }
  method_full_name_->assign(value);
}
inline void RpcMessage::set_method_full_name(const char* value, size_t size) {
  set_has_method_full_name();
  if (method_full_name_ == &::google::protobuf::internal::kEmptyString) {
    method_full_name_ = new ::std::string;
  }
  method_full_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcMessage::mutable_method_full_name() {
  set_has_method_full_name();
  if (method_full_name_ == &::google::protobuf::internal::kEmptyString) {
    method_full_name_ = new ::std::string;
  }
  return method_full_name_;
}
inline ::std::string* RpcMessage::release_method_full_name() {
  clear_has_method_full_name();
  if (method_full_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_full_name_;
    method_full_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RpcMessage::set_allocated_method_full_name(::std::string* method_full_name) {
  if (method_full_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_full_name_;
  }
  if (method_full_name) {
    set_has_method_full_name();
    method_full_name_ = method_full_name;
  } else {
    clear_has_method_full_name();
    method_full_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string message_body = 4;
inline bool RpcMessage::has_message_body() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcMessage::set_has_message_body() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcMessage::clear_has_message_body() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcMessage::clear_message_body() {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    message_body_->clear();
  }
  clear_has_message_body();
}
inline const ::std::string& RpcMessage::message_body() const {
  return *message_body_;
}
inline void RpcMessage::set_message_body(const ::std::string& value) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(value);
}
inline void RpcMessage::set_message_body(const char* value) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(value);
}
inline void RpcMessage::set_message_body(const char* value, size_t size) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcMessage::mutable_message_body() {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  return message_body_;
}
inline ::std::string* RpcMessage::release_message_body() {
  clear_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_body_;
    message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RpcMessage::set_allocated_message_body(::std::string* message_body) {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    delete message_body_;
  }
  if (message_body) {
    set_has_message_body();
    message_body_ = message_body;
  } else {
    clear_has_message_body();
    message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PocoRpc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_poco_5frpc_2eproto__INCLUDED
