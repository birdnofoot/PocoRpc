// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: poco_rpc.proto

#ifndef PROTOBUF_poco_5frpc_2eproto__INCLUDED
#define PROTOBUF_poco_5frpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PocoRpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_poco_5frpc_2eproto();
void protobuf_AssignDesc_poco_5frpc_2eproto();
void protobuf_ShutdownFile_poco_5frpc_2eproto();

class RpcMessage;

// ===================================================================

class RpcMessage : public ::google::protobuf::Message {
 public:
  RpcMessage();
  virtual ~RpcMessage();

  RpcMessage(const RpcMessage& from);

  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMessage& default_instance();

  void Swap(RpcMessage* other);

  // implements Message ----------------------------------------------

  RpcMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMessage& from);
  void MergeFrom(const RpcMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required string method = 2;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 2;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  inline void set_allocated_method(::std::string* method);

  // required string guid = 3;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // required string msg_body = 4;
  inline bool has_msg_body() const;
  inline void clear_msg_body();
  static const int kMsgBodyFieldNumber = 4;
  inline const ::std::string& msg_body() const;
  inline void set_msg_body(const ::std::string& value);
  inline void set_msg_body(const char* value);
  inline void set_msg_body(const char* value, size_t size);
  inline ::std::string* mutable_msg_body();
  inline ::std::string* release_msg_body();
  inline void set_allocated_msg_body(::std::string* msg_body);

  // @@protoc_insertion_point(class_scope:PocoRpc.RpcMessage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_msg_body();
  inline void clear_has_msg_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* method_;
  ::std::string* guid_;
  ::std::string* msg_body_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_poco_5frpc_2eproto();
  friend void protobuf_AssignDesc_poco_5frpc_2eproto();
  friend void protobuf_ShutdownFile_poco_5frpc_2eproto();

  void InitAsDefaultInstance();
  static RpcMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcMessage

// required uint64 id = 1;
inline bool RpcMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcMessage::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 RpcMessage::id() const {
  return id_;
}
inline void RpcMessage::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required string method = 2;
inline bool RpcMessage::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcMessage::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcMessage::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcMessage::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& RpcMessage::method() const {
  return *method_;
}
inline void RpcMessage::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RpcMessage::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RpcMessage::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcMessage::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* RpcMessage::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RpcMessage::set_allocated_method(::std::string* method) {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (method) {
    set_has_method();
    method_ = method;
  } else {
    clear_has_method();
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string guid = 3;
inline bool RpcMessage::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcMessage::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcMessage::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcMessage::clear_guid() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& RpcMessage::guid() const {
  return *guid_;
}
inline void RpcMessage::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void RpcMessage::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void RpcMessage::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcMessage::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  return guid_;
}
inline ::std::string* RpcMessage::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RpcMessage::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string msg_body = 4;
inline bool RpcMessage::has_msg_body() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcMessage::set_has_msg_body() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcMessage::clear_has_msg_body() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcMessage::clear_msg_body() {
  if (msg_body_ != &::google::protobuf::internal::kEmptyString) {
    msg_body_->clear();
  }
  clear_has_msg_body();
}
inline const ::std::string& RpcMessage::msg_body() const {
  return *msg_body_;
}
inline void RpcMessage::set_msg_body(const ::std::string& value) {
  set_has_msg_body();
  if (msg_body_ == &::google::protobuf::internal::kEmptyString) {
    msg_body_ = new ::std::string;
  }
  msg_body_->assign(value);
}
inline void RpcMessage::set_msg_body(const char* value) {
  set_has_msg_body();
  if (msg_body_ == &::google::protobuf::internal::kEmptyString) {
    msg_body_ = new ::std::string;
  }
  msg_body_->assign(value);
}
inline void RpcMessage::set_msg_body(const char* value, size_t size) {
  set_has_msg_body();
  if (msg_body_ == &::google::protobuf::internal::kEmptyString) {
    msg_body_ = new ::std::string;
  }
  msg_body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcMessage::mutable_msg_body() {
  set_has_msg_body();
  if (msg_body_ == &::google::protobuf::internal::kEmptyString) {
    msg_body_ = new ::std::string;
  }
  return msg_body_;
}
inline ::std::string* RpcMessage::release_msg_body() {
  clear_has_msg_body();
  if (msg_body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_body_;
    msg_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RpcMessage::set_allocated_msg_body(::std::string* msg_body) {
  if (msg_body_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_body_;
  }
  if (msg_body) {
    set_has_msg_body();
    msg_body_ = msg_body;
  } else {
    clear_has_msg_body();
    msg_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PocoRpc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_poco_5frpc_2eproto__INCLUDED
